/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Variant } from "./components/pc-button/pc-button";
export { Variant } from "./components/pc-button/pc-button";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface PcButton {
        "ariaLabel": string;
        "disabled": boolean;
        "icon": string;
        "type": 'button' | 'submit' | 'reset';
        "variant": Variant;
    }
    interface PcIcon {
        "name": string;
    }
}
export interface PcButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcButtonElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPcButtonElementEventMap {
        "buttonClick": void;
    }
    interface HTMLPcButtonElement extends Components.PcButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcButtonElementEventMap>(type: K, listener: (this: HTMLPcButtonElement, ev: PcButtonCustomEvent<HTMLPcButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcButtonElementEventMap>(type: K, listener: (this: HTMLPcButtonElement, ev: PcButtonCustomEvent<HTMLPcButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcButtonElement: {
        prototype: HTMLPcButtonElement;
        new (): HTMLPcButtonElement;
    };
    interface HTMLPcIconElement extends Components.PcIcon, HTMLStencilElement {
    }
    var HTMLPcIconElement: {
        prototype: HTMLPcIconElement;
        new (): HTMLPcIconElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "pc-button": HTMLPcButtonElement;
        "pc-icon": HTMLPcIconElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface PcButton {
        "ariaLabel"?: string;
        "disabled"?: boolean;
        "icon"?: string;
        "onButtonClick"?: (event: PcButtonCustomEvent<void>) => void;
        "type"?: 'button' | 'submit' | 'reset';
        "variant"?: Variant;
    }
    interface PcIcon {
        "name"?: string;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "pc-button": PcButton;
        "pc-icon": PcIcon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "pc-button": LocalJSX.PcButton & JSXBase.HTMLAttributes<HTMLPcButtonElement>;
            "pc-icon": LocalJSX.PcIcon & JSXBase.HTMLAttributes<HTMLPcIconElement>;
        }
    }
}
